using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Globalization;

namespace QuanLySinhVienUEH
{
    internal class Program
    {
        static string[,] sinhViens = new string[1000, 8]; // Mảng lưu danh sách sinh viên (tối đa 100 sinh viên)
        static int sinhVienCount = 0; // Số lượng sinh viên hiện tại
        static string fileName = "SinhVien.txt"; // Đường dẫn đến file
        static void Main(string[] args)
        {
            while (true)
            {
                ShowMenu();
                Console.Write("\nChọn một tùy chọn (1-6): ");
                string choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        ThemSinhVien();
                        break;

                    case "2":
                        TimTTSinhVien();
                        break;

                    case "3":
                        SuaSinhVien();
                        break;

                    case "4":
                        XoaSinhVien();
                        break;

                    case "5":
                        XuatDanhSachHocBong();
                        break;

                    case "6":
                        // Nhập điểm trung bình từ người dùng
                        Console.Write("Nhập điểm trung bình của sinh viên: ");
                        string diemTrungBinh = Console.ReadLine(); // Nhập điểm trung bình dưới dạng chuỗi
                        XetLoaiTotNghiep(diemTrungBinh); // Truyền tham số vào hàm XetLoaiTotNghiep
                        break;

                    case "7":
                        Console.WriteLine("Thoát chương trình.");
                        return;

                    default:
                        Console.WriteLine("Lựa chọn không hợp lệ. Vui lòng thử lại!");
                        break;
                }

                Console.WriteLine("\nNhấn phím bất kỳ để quay lại menu...");
                Console.ReadKey();
            }
        }

        static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("===============================================");
            Console.WriteLine("            QUẢN LÝ SINH VIÊN UEH");
            Console.WriteLine("===============================================");
            Console.WriteLine("1. Thêm Sinh Viên");
            Console.WriteLine("2. Xem Thông Tin Sinh Viên");
            Console.WriteLine("3. Sửa Thông Tin Sinh Viên");
            Console.WriteLine("4. Xóa Sinh Viên");
            Console.WriteLine("5. Xuất Danh Sách Học Bổng");
            Console.WriteLine("6. Xét Loại Tốt Nghiệp");
            Console.WriteLine("7. Thoát Khỏi Hệ Thống");
            Console.WriteLine("===============================================");
        }


        /// <summary>
        /// Đọc file SinhVien.txt
        /// </summary>
        static void DocFileSinhVien()
        {
            try
            {
                // Mở file SinhVien.txt và đọc dữ liệu
                using (StreamReader sr = new StreamReader("SinhVien.txt"))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        // Tách các trường từ dòng dữ liệu
                        string[] fields = line.Split(',');

                        if (fields.Length == 8)
                        {
                            sinhViens[sinhVienCount, 0] = fields[0];  // MSSV
                            sinhViens[sinhVienCount, 1] = fields[1];  // Lớp
                            sinhViens[sinhVienCount, 2] = fields[2];  // Họ Tên
                            sinhViens[sinhVienCount, 3] = fields[3];  // Ngày Sinh
                            sinhViens[sinhVienCount, 4] = fields[4];  // Nơi Sinh
                            sinhViens[sinhVienCount, 5] = fields[5];  // Giới Tính
                            sinhViens[sinhVienCount, 6] = fields[6];  // Điểm Trung Bình
                            sinhViens[sinhVienCount, 7] = fields[7];  // Điểm Rèn Luyện

                            sinhVienCount++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Lỗi khi đọc file SinhVien.txt: " + ex.Message);
            }
        }


        // Kiểm tra xem MSSV đã tồn tại trong file chưa
        static bool MSSVExist(string mssv)
        {
            try
            {
                // Đọc tất cả các dòng từ file
                string[] lines = File.ReadAllLines(fileName);

                foreach (string line in lines)
                {
                    string[] data = line.Split(',');
                    if (data[0] == mssv) // Kiểm tra MSSV đã tồn tại trong file
                    {
                        return true; // MSSV đã tồn tại
                    }
                }
            }
            catch (IOException ex)
            {
                Console.WriteLine($"Đã có lỗi khi đọc file: {ex.Message}");
            }
            return false; // MSSV không tồn tại
        }

        static void ThemSinhVien()
        {
            if (sinhVienCount >= sinhViens.GetLength(0))
            {
                Console.WriteLine("Danh sách sinh viên đã đầy!");
                return;
            }

            Console.WriteLine("=== Thêm Sinh Viên ===");

            // Nhập MSSV
            string mssv;
            while (true)
            {
                try
                {
                    Console.Write("MSSV (8 số): ");
                    mssv = Console.ReadLine();

                    // Kiểm tra xem MSSV đã tồn tại trong file chưa
                    if (MSSVExist(mssv))
                    {
                        Console.WriteLine("Dữ liệu sinh viên đã tồn tại. Vui lòng nhập MSSV khác.");
                        continue;
                    }

                    if (mssv.Length != 8 || !mssv.All(char.IsDigit))
                    {
                        throw new Exception("MSSV phải có 8 số. Vui lòng nhập lại.");
                    }
                    break;
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            sinhViens[sinhVienCount, 0] = mssv;

            // Nhập Lớp
            string lop;
            while (true)
            {
                Console.Write("Lớp (Ví dụ: EEP001): ");
                lop = Console.ReadLine();
                if (lop.Length == 6 && lop.Substring(0, 3).All(char.IsLetter) && lop.Substring(3, 3).All(char.IsDigit))
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Lớp phải có định dạng '3 chữ cái + 3 số'. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 1] = lop;

            // Nhập Họ Tên
            string hoTen;
            while (true)
            {
                Console.Write("Họ Tên: ");
                hoTen = Console.ReadLine();
                if (!string.IsNullOrWhiteSpace(hoTen))
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Họ tên không thể để trống. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 2] = hoTen;

            // Nhập Ngày Sinh
            string ngaySinh;
            while (true)
            {
                Console.Write("Ngày Sinh (DD/MM/YYYY): ");
                ngaySinh = Console.ReadLine();
                if (DateTime.TryParseExact(ngaySinh, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out _))
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Ngày sinh không hợp lệ. Vui lòng nhập lại theo định dạng DD/MM/YYYY.");
                }
            }
            sinhViens[sinhVienCount, 3] = ngaySinh;

            // Nhập Nơi Sinh
            string noiSinh;
            while (true)
            {
                Console.Write("Nơi Sinh: ");
                noiSinh = Console.ReadLine();
                if (!string.IsNullOrWhiteSpace(noiSinh))
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Nơi sinh không thể để trống. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 4] = noiSinh;

            // Nhập Giới Tính
            string gioiTinh;
            while (true)
            {
                Console.Write("Giới Tính (Nam/Nữ): ");
                gioiTinh = Console.ReadLine();
                if (gioiTinh.ToLower() == "nam" || gioiTinh.ToLower() == "nữ")
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Giới tính phải là 'Nam' hoặc 'Nữ'. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 5] = gioiTinh;

            // Nhập Điểm Trung Bình
            double dtb;
            while (true)
            {
                Console.Write("Điểm Trung Bình (ĐTB, từ 1 đến 10): ");
                string dtbInput = Console.ReadLine();
                if (double.TryParse(dtbInput, out dtb) && dtb >= 1 && dtb <= 10)
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Điểm Trung Bình phải từ 1 đến 10. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 6] = dtb.ToString();

            // Nhập Điểm Rèn Luyện
            int drl;
            while (true)
            {
                Console.Write("Điểm Rèn Luyện (ĐRL, từ 50 đến 100): ");
                string drlInput = Console.ReadLine();
                if (int.TryParse(drlInput, out drl) && drl >= 50 && drl <= 100)
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Điểm Rèn Luyện phải từ 50 đến 100. Vui lòng nhập lại.");
                }
            }
            sinhViens[sinhVienCount, 7] = drl.ToString();

            sinhVienCount++;
            Console.WriteLine("Thêm sinh viên thành công!");

            // Cập nhật vào file SinhVien.txt
            GhiFileSinhVien();
        }


        static void GhiFileSinhVien()
        {
            try
            {
                using (StreamWriter sw = new StreamWriter(fileName))
                {
                    for (int i = 0; i < sinhVienCount; i++)
                    {
                        sw.WriteLine($"{sinhViens[i, 0]},{sinhViens[i, 1]},{sinhViens[i, 2]},{sinhViens[i, 3]},{sinhViens[i, 4]},{sinhViens[i, 5]},{sinhViens[i, 6]},{sinhViens[i, 7]}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Lỗi khi ghi file SinhVien.txt: " + ex.Message);
            }
        }

       static void TimTTSinhVien()
        {
            string mssv;
            bool index = false;

            while (true)
            {
                // Nhập MSSV. Kiểm tra cấu trúc của MSSV phải gồm 8 chữ số
                Console.Write("Nhập MSSV của sinh viên cần tìm: ");
                mssv = Console.ReadLine();

                if (mssv.Length != 8 || !mssv.All(char.IsDigit))
                {
                    Console.WriteLine("Mã số sinh viên phải bao gồm đúng 8 chữ số.");
                }
                else
                {
                    // Kiểm tra MSSV có tồn tại trong danh sách sinh viên hay không
                    index = MSSVExist(mssv);
                    if (index)
                        break;
                    else
                    {
                        Console.WriteLine("Không tìm thấy sinh viên với MSSV này.");
                        return;
                    }
                }
            }

            // Tìm sinh viên trong file SinhVien.txt và hiển thị thông tin
            try
            {
                // Đọc tất cả dòng từ file SinhVien.txt
                string[] lines = File.ReadAllLines("SinhVien.txt");

                // Duyệt qua các dòng trong file để tìm thông tin sinh viên
                foreach (var line in lines)
                {
                    string[] fields = line.Split('|');  // Tách các trường thông tin trong dòng

                    // Tìm sinh viên có MSSV trùng khớp
                    if (fields[0].Trim() == mssv)
                    {
                        // Lấy điểm trung bình từ file
                        double diemTB = double.Parse(fields[6]);

                        // Quy đổi điểm trung bình từ hệ 10 sang hệ 4
                        double diemHe4 = XetDiemCot4(diemTB);
                        Console.WriteLine($"MSSV: {fields[0]}");
                        Console.WriteLine($"Lớp: {fields[1]}");
                        Console.WriteLine($"Họ tên: {fields[2]}");
                        Console.WriteLine($"Ngày sinh: {fields[3]}");
                        Console.WriteLine($"Nơi sinh: {fields[4]}");
                        Console.WriteLine($"Giới tính: {fields[5]}");
                        Console.WriteLine($"Điểm trung bình: {fields[6]}");
                        Console.WriteLine($"Điểm rèn luyện: {fields[7]}");
                        Console.WriteLine($"Điểm hệ 4: {diemHe4}");
                        return;  // Nếu tìm thấy sinh viên thì kết thúc hàm
                    }
                }

                // Nếu không tìm thấy MSSV trong file
                Console.WriteLine("Không tìm thấy sinh viên với MSSV này trong file.");
            }
            catch (Exception ex)
            {
                // Xử lý lỗi khi đọc file
                Console.WriteLine("Lỗi khi đọc dữ liệu từ file: " + ex.Message);
            }
        }

        static void SuaSinhVien()
        {
            int hangSV;
            string mssv;
            bool index = true;
            Console.WriteLine("=== Sửa Sinh Viên ===");
            while (true)
            {
                try
                {
                    //Nhập MSSV. Kiếm tra cấu trúc của MSSV phải gồm 8 chữ số
                    Console.Write("Nhập MSSV của sinh viên cần sửa: ");
                    mssv = Console.ReadLine();
                    long StudentID = long.Parse(mssv);
                    if (mssv.Length != 8)
                    {
                        throw new ArgumentException("Mã số sinh viên phải bao gồm đúng 8 chữ số.");
                    }
                    else
                    {
                        index = MSSVExist(mssv);
                        break;
                    }
                }
                catch (FormatException)
                {
                    Console.WriteLine("Mã số sinh viên phải là số nguyên");
                }

            }
            //Tìm sinh viên dựa trên mã số, nếu không có thì thông báo
            if (index == false)
            {
                Console.WriteLine("Không tìm thấy sinh viên với MSSV này.");
                return;
            }
            else
            {
                hangSV = TimSinhVien(mssv) + 1;
                Console.WriteLine("=== Sửa Thông Tin Sinh Viên ===");
                while (true)
                {
                    try
                    {
                        //Nhập từng thông tin để sửa, nếu thông tin nào có định dạng đặc biệt thì cần kiểm tra
                        Console.Write("Lớp: ");
                        string lop = Console.ReadLine();

                        // Kiểm tra định dạng bằng Regular Expression
                        if (!System.Text.RegularExpressions.Regex.IsMatch(lop, @"^[a-zA-Z]{3}\d{3}$"))
                        {
                            throw new ArgumentException("Mã lớp không đúng định dạng. Vui lòng nhập lại.");
                        }
                        else
                        {
                            //Nếu nhập đúng thì cập nhật thông tin
                            sinhViens[hangSV, 1] = lop;
                            break;
                        }

                    }
                    catch (ArgumentException ex)
                    {
                        Console.WriteLine($"Lỗi: {ex.Message}");
                    }

                }

                //Nhập họ tên sinh viên
                string hoTen;
                while (true)
                {
                    Console.Write("Họ Tên: ");
                    hoTen = Console.ReadLine();
                    if (!string.IsNullOrWhiteSpace(hoTen))
                    {
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Họ tên không thể để trống. Vui lòng nhập lại.");
                    }
                }
                sinhViens[hangSV, 2] = hoTen;

                //Nhập ngày sinh
                Console.Write("Ngày Sinh: ");
                DateTime NgaySinh;
                while (true)
                {
                    try
                    {
                        //Kiểm tra định dạng ngày sinh
                        string date = Console.ReadLine();
                        NgaySinh = DateTime.ParseExact(date, "dd/MM/yyyy", CultureInfo.InvariantCulture);
                        sinhViens[hangSV, 3] = date;
                        break; // Thoát khỏi vòng lặp nếu hợp lệ
                    }
                    catch (FormatException)
                    {
                        Console.WriteLine("Ngày sinh không đúng định dạng. Vui lòng nhập lại (dd/MM/yyyy): ");
                    }
                }
                // Nhập Nơi Sinh
                string noiSinh;
                while (true)
                {
                    Console.Write("Nơi Sinh: ");
                    noiSinh = Console.ReadLine();
                    if (!string.IsNullOrWhiteSpace(noiSinh))
                    {
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Nơi sinh không thể để trống. Vui lòng nhập lại.");
                    }
                }
                sinhViens[hangSV, 4] = noiSinh;

                // Nhập Giới Tính
                string gioiTinh;
                while (true)
                {
                    Console.Write("Giới Tính (Nam/Nữ): ");
                    gioiTinh = Console.ReadLine();
                    if (gioiTinh.ToLower() == "nam" || gioiTinh.ToLower() == "nữ")
                    {
                        break;
                    }
                    else
                    {
                        Console.WriteLine("Giới tính phải là 'Nam' hoặc 'Nữ'. Vui lòng nhập lại.");
                    }
                }
                sinhViens[sinhVienCount, 5] = gioiTinh;
                //Nhập điểm trung bình
                Console.Write("Điểm Trung Bình (DTB): ");
                while (true)
                {
                    try
                    {
                        //Kiểm tra điểm trung bình phải là số dương và nhỏ hơn 10
                        string dtb = Console.ReadLine();
                        double Dtb = double.Parse(dtb);
                        if (Dtb > 10 | Dtb < 0)
                        {
                            Console.WriteLine("Điểm trung bình không hợp lệ.");
                        }
                        else
                        {
                            //Cập nhật điểm nếu đúng cú pháp
                            sinhViens[hangSV, 6] = dtb;
                            break;
                        }
                    }
                    catch (FormatException)
                    {
                        //Báo sai định dạng điểm
                        Console.WriteLine("Điểm trung bình không đúng định dạng. Phải là số");
                    }
                }

                //Nhập điểm trung bình
                Console.Write("Điểm Rèn Luyện (DRL): ");
                while (true)
                {
                    try
                    {
                        //Kiểm tra điểm trung bình phải là số dương và nhỏ hơn 100
                        string drl = Console.ReadLine();
                        int Drl = int.Parse(drl);
                        if (Drl > 100 | Drl < 0)
                        {
                            //Báo nếu nhập sai
                            Console.WriteLine("Điểm trung bình không hợp lệ.");
                        }
                        else
                        {
                            //Cập nhật điểm
                            sinhViens[hangSV, 7] = drl;
                            break;
                        }
                    }
                    catch (FormatException)
                    {
                        //Nếu điểm nhập vào không phải là số nguyên, chương trình sẽ thông báo
                        Console.WriteLine("Điểm trung bình không đúng định dạng. Phải là số");
                    }
                }
            }
            try
            {
                // Đọc tất cả dòng từ file SinhVien.txt
                string[] lines = File.ReadAllLines("SinhVien.txt");

                // Duyệt qua các dòng trong file để cập nhật thông tin sinh viên
                for (int i = 0; i < lines.Length; i++)
                {
                    string[] fields = lines[i].Split('|');  // Tách các trường thông tin trong dòng

                    // Tìm sinh viên có MSSV trùng khớp
                    if (fields[0].Trim() == mssv)
                    {
                        // Cập nhật lại thông tin sinh viên vào dòng tương ứng
                        lines[i] = string.Join("|",
                            fields[0],  // MSSV giữ nguyên
                            sinhViens[hangSV, 1],  // Lớp
                            sinhViens[hangSV, 2],  // Họ Tên
                            sinhViens[hangSV, 3],  // Ngày Sinh
                            sinhViens[hangSV, 4],  // Nơi Sinh
                            sinhViens[hangSV, 5],  // Giới Tính
                            sinhViens[hangSV, 6],  // Điểm Trung Bình
                            sinhViens[hangSV, 7]   // Điểm Rèn Luyện
                        );
                        break;  // Thoát khỏi vòng lặp sau khi đã cập nhật thông tin
                    }
                }

                // Ghi lại toàn bộ dữ liệu vào file SinhVien.txt
                File.WriteAllLines("SinhVien.txt", lines);
                Console.WriteLine("Sửa thông tin thành công!");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Lỗi khi cập nhật thông tin vào file: " + ex.Message);
            }
        }

        static void XoaSinhVien()
{
    int index = -1;
    while (true)
    {
        try
        {
            // Nhập MSSV. Kiểm tra cấu trúc của MSSV phải gồm 8 chữ số
            Console.Write("Nhập MSSV của sinh viên cần sửa: ");
            string mssv = Console.ReadLine();
            long StudentID = long.Parse(mssv);
            if (mssv.Length != 8 )
            {
                throw new ArgumentException("Mã số sinh viên phải bao gồm đúng 8 chữ số.");
            }
            else
            {
                index = TimSinhVien(mssv);
                break;
            }
        }
        catch (FormatException)
        {
            Console.WriteLine("Mã số sinh viên phải là số nguyên");
        }
    }

    // Tìm sinh viên dựa trên mã số, nếu không có thì thông báo
    if (index == -1)
    {
        Console.WriteLine("Không tìm thấy sinh viên với MSSV này.");
        return;
    }
    else
    {
        // Dịch các phần tử phía sau lên một hàng
        for (int i = index; i < sinhVienCount - 1; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                sinhViens[i, j] = sinhViens[i + 1, j];
            }
        }
        // Xóa hàng cuối cùng, bây giờ là hàng có thông tin của sinh viên cần xóa
        sinhVienCount--;
        Console.WriteLine("Xóa sinh viên thành công!");

        // Ghi lại toàn bộ dữ liệu vào file
        GhiFileSinhVien();
    }
}

        static void XuatDanhSachHocBong()
{
    Console.Clear();
    Console.WriteLine(">>> Danh Sách Sinh Viên Được Xét Học Bổng <<<");

    // Sắp xếp mảng sinh viên theo tiêu chí: điểm trung bình trước, sau đó đến điểm rèn luyện
    SapXepSinhVien();

    // Tạo các nhóm dựa vào MSSV
    string[,] khoa49 = LocSinhVienTheoKhoa("3123");
    string[,] khoa48 = LocSinhVienTheoKhoa("3122");
    string[,] khoa47 = LocSinhVienTheoKhoa("3121");

    // Random số suất học bổng cho mỗi khóa (8-9 suất)
    Random rand = new Random();
    int scholarshipSlotsKhoa49 = rand.Next(8, 10);
    int scholarshipSlotsKhoa48 = rand.Next(8, 10);
    int scholarshipSlotsKhoa47 = rand.Next(8, 10);

    // Cấp học bổng cho mỗi khóa
    string[,] khoa49HocBong = CapHocBong(khoa49, scholarshipSlotsKhoa49);
    string[,] khoa48HocBong = CapHocBong(khoa48, scholarshipSlotsKhoa48);
    string[,] khoa47HocBong = CapHocBong(khoa47, scholarshipSlotsKhoa47);

    // Ghi danh sách vào file và in ra console
    using (StreamWriter writer = new StreamWriter("ketQuaHocBong.txt"))
    {
        GhiVaHienThiBang(writer, "Danh sách sinh viên đạt học bổng KKHT Khóa 49 – ĐHCQ", khoa49HocBong);
        Console.WriteLine(new string('-', 80));
        GhiVaHienThiBang(writer, "Danh sách sinh viên đạt học bổng KKHT Khóa 48 – ĐHCQ", khoa48HocBong);
        Console.WriteLine(new string('-', 80));
        GhiVaHienThiBang(writer, "Danh sách sinh viên đạt học bổng KKHT Khóa 47 – ĐHCQ", khoa47HocBong);
    }

    Console.WriteLine("\nKết quả đã được xuất vào tệp 'ketQuaHocBong.txt'.");
    Console.WriteLine("Nhấn phím bất kỳ để quay lại menu...");
    Console.ReadKey();
}

// Hàm xử lý ghi và hiển thị danh sách
static void GhiVaHienThiBang(StreamWriter writer, string tieuDe, string[,] sinhViens)
{
    writer.WriteLine(tieuDe);
    writer.WriteLine(new string('-', 80));
    Console.WriteLine(tieuDe);
    Console.WriteLine(new string('-', 80));

    string header = "MSSV | Họ Tên               | Lớp       | ĐTB  | ĐRL  | Điểm hệ 4 | Loại học bổng";
    writer.WriteLine(header);
    writer.WriteLine(new string('-', header.Length));
    Console.WriteLine(header);
    Console.WriteLine(new string('-', header.Length));

    for (int i = 0; i < sinhViens.GetLength(0); i++)
    {
        if (sinhViens[i, 0] == null) break; // Nếu dòng rỗng thì dừng
        string row = $"{sinhViens[i, 0]} | {sinhViens[i, 1],-20} | {sinhViens[i, 2],-10} | {sinhViens[i, 3]} | {sinhViens[i, 4]} | {sinhViens[i, 6]} | {sinhViens[i, 7]}";
        writer.WriteLine(row);
        Console.WriteLine(row);
    }

    writer.WriteLine(new string('-', 80));
    Console.WriteLine(new string('-', 80));
}

// Hàm lọc sinh viên theo khóa
static string[,] LocSinhVienTheoKhoa(string maKhoa)
{
    string[,] ketQua = new string[100, 8];
    int index = 0;

    for (int i = 0; i < soLuongSinhVien; i++)
    {
        if (sinhViens[i, 0].StartsWith(maKhoa))
        {
            for (int j = 0; j < 8; j++)
                ketQua[index, j] = sinhViens[i, j];
            index++;
        }
    }

    return ketQua;
}

// Hàm cấp học bổng cho mỗi khóa
static string[,] CapHocBong(string[,] sinhViens, int scholarshipSlots)
{
    string[,] ketQua = new string[scholarshipSlots, 8];
    int index = 0;

    for (int i = 0; i < sinhViens.GetLength(0); i++)
    {
        if (index >= scholarshipSlots || sinhViens[i, 0] == null) break;

        double dtb = double.Parse(sinhViens[i, 3]);
        int drl = int.Parse(sinhViens[i, 4]);
        string loaiHocBong = XetLoaiHocBong(dtb, drl);

        if (loaiHocBong != "Không đủ điều kiện")
        {
            for (int j = 0; j < 8; j++)
                ketQua[index, j] = sinhViens[i, j];
            ketQua[index, 7] = loaiHocBong; // Cập nhật loại học bổng
            index++;
        }
    }

    return ketQua;
}

// Hàm sắp xếp mảng sinh viên
static void SapXepSinhVien()
{
    for (int i = 0; i < soLuongSinhVien - 1; i++)
    {
        for (int j = i + 1; j < soLuongSinhVien; j++)
        {
            double dtbI = double.Parse(sinhViens[i, 3]);
            double dtbJ = double.Parse(sinhViens[j, 3]);
            int drlI = int.Parse(sinhViens[i, 4]);
            int drlJ = int.Parse(sinhViens[j, 4]);

            if (dtbJ > dtbI || (dtbJ == dtbI && drlJ > drlI))
            {
                // Hoán đổi hai hàng
                for (int k = 0; k < 8; k++)
                {
                    string temp = sinhViens[i, k];
                    sinhViens[i, k] = sinhViens[j, k];
                    sinhViens[j, k] = temp;
                }
            }
        }
    }
}

// Hàm xác định loại học bổng
static string XetLoaiHocBong(double dtb, int drl)
{
    if (dtb >= 9.0 && drl >= 90)
        return "Xuất sắc";
    else if (dtb >= 8.0 && drl >= 80)
        return "Giỏi";
    else if (dtb >= 7.0 && drl >= 70)
        return "Khá";
    else
        return "Không đủ điều kiện";
}

        static int TimSinhVien(string mssv)
        {
            mssv = mssv.Trim();  // Loại bỏ khoảng trắng trước và sau

            // Đọc tất cả dòng từ file SinhVien.txt
            string[] lines = File.ReadAllLines("SinhVien.txt");

            // Duyệt qua các dòng trong file để tìm MSSV
            for (int i = 0; i < lines.Length; i++)
            {
                string[] fields = lines[i].Split('|');  // Tách các trường trong dòng (giả sử bạn sử dụng dấu "|" để phân cách các trường)

                // Kiểm tra nếu MSSV trong file trùng khớp với mssv
                if (fields[0].Trim() == mssv)  // Loại bỏ khoảng trắng trong MSSV từ file
                {
                    return i; // Trả về chỉ số sinh viên trong file
                }
            }

            return -1; // Không tìm thấy sinh viên với MSSV này
        }
        static void XetLoaiTotNghiep(string a)
        {
            //Khai báo các biến
            double DTB = double.Parse(a);
            string LoaiTotNghiep;
            //Đổi điểm trung bình của sinh viên sang hệ 4
            double Diem = XetDiemCot4(DTB);
            //Đánh giá hạng tốt nghiệp dựa trên điểm trung bình
            if (Diem == 4)
            {
                LoaiTotNghiep = "Xuất sắc";
                Console.WriteLine($"Với điểm trung bình hiện tại, loại tốt nghiệp tạm thời của bạn là {LoaiTotNghiep}! Hãy cố gắng học tập nhé!");
            }
            else if (Diem == 3.5)
            {
                LoaiTotNghiep = "Giỏi";
                Console.WriteLine($"Với điểm trung bình hiện tại, loại tốt nghiệp tạm thời của bạn là {LoaiTotNghiep}! Hãy cố gắng học tập nhé!");
            }
            else if (Diem == 3 | Diem == 2.5)
            {
                LoaiTotNghiep = "Khá";
                Console.WriteLine($"Với điểm trung bình hiện tại, loại tốt nghiệp tạm thời của bạn là {LoaiTotNghiep}! Hãy cố gắng học tập nhé!");
            }
            else if (Diem == 2)
            {
                LoaiTotNghiep = "Trung bình";
                Console.WriteLine($"Với điểm trung bình hiện tại, loại tốt nghiệp tạm thời của bạn là {LoaiTotNghiep}! Hãy cố gắng học tập nhé!");
            }
            else
            {
                //Nếu sinh viên chưa đủ điều kiện thì báo
                Console.WriteLine("Bạn chưa đủ điều kiện tốt nghiệp.");
            }
        }
        static double XetDiemCot4(double b)
        {
            //Quy đổi điểm hệ 10 sang điểm hệ 4
            if (b >= 8.5)
            {
                b = 4;
            }
            else if (b >= 8 && b <= 8.4)
            {
                b = 3.5;
            }
            else if (b >= 7 && b <= 7.9)
            {
                b = 3;
            }
            else if (b >= 6.5 && b <= 6.9)
            {
                b = 2.5;
            }
            else if (b >= 5.5 && b <= 6.4)
            {
                b = 2;
            }
            else if (b >= 5.4 && b <= 5)
            {
                b = 1.5;
            }
            else if (b >= 4 && b <= 4.9)
            {
                b = 1;
            }
            else
            {
                b = 0;
            }
            return b;
        }
    }
}

